// <auto-generated />
using System;
using BreakChain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BreakChain.Data.Migrations
{
    [DbContext(typeof(BreakChainDbContext))]
    partial class BreakChainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BreakChain.Data.Entities.Competitor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<long>("Wallet")
                        .HasColumnType("bigint");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Competitors");
                });

            modelBuilder.Entity("BreakChain.Data.Entities.Match", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LosingCompetitorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Stake")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("WinningCompetitorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LosingCompetitorId");

                    b.HasIndex("WinningCompetitorId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("BreakChain.Data.Entities.MatchCompetitor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompetitorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MatchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompetitorId");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchCompetitors");
                });

            modelBuilder.Entity("BreakChain.Data.Entities.Match", b =>
                {
                    b.HasOne("BreakChain.Data.Entities.Competitor", "LosingCompetitor")
                        .WithMany("MatchLosses")
                        .HasForeignKey("LosingCompetitorId");

                    b.HasOne("BreakChain.Data.Entities.Competitor", "WinningCompetitor")
                        .WithMany("MatchWins")
                        .HasForeignKey("WinningCompetitorId");
                });

            modelBuilder.Entity("BreakChain.Data.Entities.MatchCompetitor", b =>
                {
                    b.HasOne("BreakChain.Data.Entities.Competitor", "Competitor")
                        .WithMany("Matches")
                        .HasForeignKey("CompetitorId");

                    b.HasOne("BreakChain.Data.Entities.Match", "Match")
                        .WithMany("Competitors")
                        .HasForeignKey("MatchId");
                });
#pragma warning restore 612, 618
        }
    }
}
