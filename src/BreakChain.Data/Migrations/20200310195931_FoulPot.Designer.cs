// <auto-generated />
using System;
using BreakChain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BreakChain.Data.Migrations
{
    [DbContext(typeof(BreakChainDbContext))]
    [Migration("20200310195931_FoulPot")]
    partial class FoulPot
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BreakChain.Data.Entities.Competitor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<long>("Wallet")
                        .HasColumnType("bigint");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Competitors");

                    b.HasData(
                        new
                        {
                            Id = "ba215c0b-02d5-40e4-b437-410a71d3b6d7",
                            Losses = 0,
                            Name = "Joseph",
                            Timestamp = new DateTime(2020, 3, 10, 19, 59, 31, 429, DateTimeKind.Local).AddTicks(3440),
                            Wallet = 200L,
                            Wins = 0
                        },
                        new
                        {
                            Id = "2b5c7939-f841-4aa4-b739-d9295cd73528",
                            Losses = 0,
                            Name = "Chris",
                            Timestamp = new DateTime(2020, 3, 10, 19, 59, 31, 431, DateTimeKind.Local).AddTicks(3287),
                            Wallet = 200L,
                            Wins = 0
                        },
                        new
                        {
                            Id = "05f50b52-fb49-437d-9dea-a1d7b7927f97",
                            Losses = 0,
                            Name = "Mark",
                            Timestamp = new DateTime(2020, 3, 10, 19, 59, 31, 431, DateTimeKind.Local).AddTicks(3325),
                            Wallet = 200L,
                            Wins = 0
                        },
                        new
                        {
                            Id = "4b2869a9-d4b9-45f1-9c0c-f63b7f87ef59",
                            Losses = 0,
                            Name = "Phil",
                            Timestamp = new DateTime(2020, 3, 10, 19, 59, 31, 431, DateTimeKind.Local).AddTicks(3331),
                            Wallet = 200L,
                            Wins = 0
                        },
                        new
                        {
                            Id = "037bda36-b070-4087-bee3-19fa786e0dd4",
                            Losses = 0,
                            Name = "James",
                            Timestamp = new DateTime(2020, 3, 10, 19, 59, 31, 431, DateTimeKind.Local).AddTicks(3335),
                            Wallet = 200L,
                            Wins = 0
                        });
                });

            modelBuilder.Entity("BreakChain.Data.Entities.Match", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("CurrentFoulPot")
                        .HasColumnType("bigint");

                    b.Property<string>("LosingCompetitorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Stake")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("WinningCompetitorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LosingCompetitorId");

                    b.HasIndex("WinningCompetitorId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("BreakChain.Data.Entities.MatchCompetitor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompetitorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MatchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompetitorId");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchCompetitors");
                });

            modelBuilder.Entity("BreakChain.Data.Entities.Match", b =>
                {
                    b.HasOne("BreakChain.Data.Entities.Competitor", "LosingCompetitor")
                        .WithMany("MatchLosses")
                        .HasForeignKey("LosingCompetitorId");

                    b.HasOne("BreakChain.Data.Entities.Competitor", "WinningCompetitor")
                        .WithMany("MatchWins")
                        .HasForeignKey("WinningCompetitorId");
                });

            modelBuilder.Entity("BreakChain.Data.Entities.MatchCompetitor", b =>
                {
                    b.HasOne("BreakChain.Data.Entities.Competitor", "Competitor")
                        .WithMany("Matches")
                        .HasForeignKey("CompetitorId");

                    b.HasOne("BreakChain.Data.Entities.Match", "Match")
                        .WithMany("Competitors")
                        .HasForeignKey("MatchId");
                });
#pragma warning restore 612, 618
        }
    }
}
